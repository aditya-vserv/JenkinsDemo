// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Vmax
import AdSupport
import AppTrackingTransparency
import CoreLocation
import CoreTelephony
import Foundation
import Network
import SafariServices
import Swift
import UIKit
@_exported import Vmax
import WebKit
import _Concurrency
public enum VmaxAdAssetType {
  case instreamVideo, outstreamVideo, display, mediation
  public static func == (a: Vmax.VmaxAdAssetType, b: Vmax.VmaxAdAssetType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class VmaxAdAssetHelperFactory {
  public init()
  public func get(type: Vmax.VmaxAdAssetType) -> Vmax.VmaxAdAssetHelper?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class NetworkStatusFetcher : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
  final public func fetch() -> Vmax.ConnectionType
}
public typealias RequestImpMeta = [Vmax.RequestimpmetaInner]
public struct RequestSiteMeta : Swift.Codable {
  public var _id: Swift.String
  public var sectioncat: [Swift.String]?
  public var page: Swift.String?
  public var ref: Swift.String?
  public var search: Swift.String?
  public var pagecat: [Swift.String]?
  public var ext: Vmax.RequestSiteExtMeta?
  public var kwarray: [Swift.String]?
  public init(_id: Swift.String, sectioncat: [Swift.String]? = nil, page: Swift.String? = nil, ref: Swift.String? = nil, search: Swift.String? = nil, pagecat: [Swift.String]? = nil, ext: Vmax.RequestSiteExtMeta? = nil, kwarray: [Swift.String]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case sectioncat
    case page
    case ref
    case search
    case pagecat
    case ext
    case kwarray
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum FamilyParenting : Swift.Int {
  case adoption
  case babiesToddlers
  case daycarePreSchool
  case familyInternet
  case parentingK6Kids
  case parentingTeens
  case pregnancy
  case specialNeedsKids
  case eldercare
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.FamilyParenting : Swift.CaseIterable {
  public typealias AllCases = [Vmax.FamilyParenting]
  public static var allCases: [Vmax.FamilyParenting] {
    get
  }
}
@objc public class VmaxPagesFamilyParenting : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.FamilyParenting)
  @objc deinit
}
public enum Sports : Swift.Int {
  case autoRacing
  case baseball
  case bicycling
  case bodybuilding
  case boxing
  case canoeingKayaking
  case cheerleading
  case climbing
  case cricket
  case figureSkating
  case flyFishing
  case football
  case freshwaterFishing
  case gameFish
  case golf
  case horseRacing
  case horses
  case huntingShooting
  case inlineSkating
  case martialArts
  case mountainBiking
  case nascarRacing
  case olympics
  case paintball
  case powerMotorcycles
  case proBasketball
  case proIceHockey
  case rodeo
  case rugby
  case runningJogging
  case sailing
  case saltwaterFishing
  case scubaDiving
  case skateboarding
  case skiing
  case snowboarding
  case surfingBodyboarding
  case swimming
  case tableTennisPingPong
  case tennis
  case volleyball
  case walking
  case waterskiWakeboard
  case worldSoccer
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Sports : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Sports]
  public static var allCases: [Vmax.Sports] {
    get
  }
}
@objc public class VmaxPagesSports : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.Sports)
  @objc deinit
}
public protocol VmaxMediaEventsListener {
  func set(vmaxMediaEvents: [Vmax.VmaxMediaEvents])
}
public protocol VmaxMediaEvents : AnyObject {
  func onImpression<T>(info: T?)
  func onStart<T>(info: T?)
  func onFirstQuartile<T>(info: T?)
  func onMidPoint<T>(info: T?)
  func onThirdQuartile<T>(info: T?)
  func onProgress<T>(info: T?, currentTime: Swift.Double, totalDuration: Swift.Double)
  func onResume<T>(info: T?)
  func onPause<T>(info: T?)
  func onMute<T>(info: T?)
  func onUnmute<T>(info: T?)
  func onComplete<T>(info: T?)
  func onFullscreen<T>(info: T?)
  func onExitFullscreen<T>(info: T?)
  func onClose<T>(info: T?)
  func onClick<T>(info: T?)
  func onSkip<T>(info: T?)
  func onError<T>(info: T?, error: Vmax.VmaxError)
  func onSkippableStateChange<T>(info: T?)
}
extension Vmax.VmaxMediaEvents {
  public func onImpression<T>(info: T?)
  public func onStart<T>(info: T?)
  public func onFirstQuartile<T>(info: T?)
  public func onMidPoint<T>(info: T?)
  public func onThirdQuartile<T>(info: T?)
  public func onProgress<T>(info: T?, currentTime: Swift.Double, totalDuration: Swift.Double)
  public func onResume<T>(info: T?)
  public func onPause<T>(info: T?)
  public func onMute<T>(info: T?)
  public func onUnmute<T>(info: T?)
  public func onComplete<T>(info: T?)
  public func onFullscreen<T>(info: T?)
  public func onExitFullscreen<T>(info: T?)
  public func onClose<T>(info: T?)
  public func onClick<T>(info: T?)
  public func onSkip<T>(info: T?)
  public func onError<T>(info: T?, error: Vmax.VmaxError)
  public func onSkippableStateChange<T>(info: T?)
}
public class VmaxMediaEventsObserver {
  public init()
  public init(observers: [Vmax.VmaxMediaEvents])
  public func add(observer: Vmax.VmaxMediaEvents)
  public func remove(observer: Vmax.VmaxMediaEvents)
  public func removeAll()
  @objc deinit
}
extension Vmax.VmaxMediaEventsObserver : Vmax.VmaxMediaEvents {
  public func onImpression<T>(info: T?)
  public func onStart<T>(info: T?)
  public func onFirstQuartile<T>(info: T?)
  public func onMidPoint<T>(info: T?)
  public func onThirdQuartile<T>(info: T?)
  public func onProgress<T>(info: T?, currentTime: Swift.Double, totalDuration: Swift.Double)
  public func onResume<T>(info: T?)
  public func onPause<T>(info: T?)
  public func onMute<T>(info: T?)
  public func onUnmute<T>(info: T?)
  public func onComplete<T>(info: T?)
  public func onFullscreen<T>(info: T?)
  public func onExitFullscreen<T>(info: T?)
  public func onClose<T>(info: T?)
  public func onClick<T>(info: T?)
  public func onSkip<T>(info: T?)
  public func onError<T>(info: T?, error: Vmax.VmaxError)
  public func onSkippableStateChange<T>(info: T?)
}
public class VmaxEvent {
  public init(name: Swift.String, httpUrls: [Swift.String])
  @objc deinit
}
public enum VmaxRequestAttributeKeys : Swift.String {
  case tagId
  case appId
  case appVersion
  case sectionCategory
  case pageCategory
  case orientation
  case customKeyValues
  case secure
  case adPosition
  case interstitialExperience
  case clickBrowser
  case userAgent
  case limitTracking
  case deviceType
  case deviceMake
  case deviceModel
  case deviceOS
  case deviceOSVersion
  case language
  case carrier
  case mccmnc
  case connectiontype
  case ifa
  case geoType
  case country
  case region
  case city
  case zip
  case latitude
  case longitude
  case accuracy
  case lastfix
  case utcoffset
  case lac
  case geoTimestamp
  case userId
  case gender
  case yob
  case age
  case isAllOf
  case notOfAny
  case adFormats
  case kwarray
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConnectionType : Swift.Int {
  case unknown
  case ethernet
  case wifi
  case cellularNetworkUnkownGeneration
  case cellularNetwork2G
  case cellularNetwork3G
  case cellularNetwork4G
  case cellularNetwork5G
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.ConnectionType : Swift.CaseIterable {
  public typealias AllCases = [Vmax.ConnectionType]
  public static var allCases: [Vmax.ConnectionType] {
    get
  }
}
public enum FoodDrink : Swift.Int {
  case americanCuisine
  case barbecuesGrilling
  case cajunCreole
  case chineseCuisine
  case cocktailsBeer
  case coffeeTea
  case cuisineSpecific
  case dessertsBaking
  case diningOut
  case foodAllergies
  case frenchCuisine
  case healthLowfatCooking
  case italianCuisine
  case japaneseCuisine
  case mexicanCuisine
  case vegan
  case vegetarian
  case wine
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.FoodDrink : Swift.CaseIterable {
  public typealias AllCases = [Vmax.FoodDrink]
  public static var allCases: [Vmax.FoodDrink] {
    get
  }
}
@objc public class VmaxPagesFoodDrink : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.FoodDrink)
  @objc deinit
}
public protocol VmaxInitializationStatusListener {
  func onInitializationSuccess()
  func onInitializationFailure(error: Vmax.VmaxError)
}
public struct RequestimpextmetaFiltersDirectselect : Swift.Codable {
  public var campaignid: Swift.Int?
  public var adid: Swift.Int?
  public init(campaignid: Swift.Int? = nil, adid: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ResponsemainadextmetaAdmeta : Swift.Codable {
  public var _id: Swift.Int?
  public var name: Swift.String?
  public var campaignMeta: Vmax.ResponsemainadextmetaAdmetaCampaignmeta?
  public init(_id: Swift.Int? = nil, name: Swift.String? = nil, campaignMeta: Vmax.ResponsemainadextmetaAdmetaCampaignmeta? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case name
    case campaignMeta
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum DeviceType : Swift.Int {
  case mobileTablet
  case personalComputer
  case connectedTV
  case phone
  case tablet
  case connectedDevice
  case setupBox
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.DeviceType : Swift.CaseIterable {
  public typealias AllCases = [Vmax.DeviceType]
  public static var allCases: [Vmax.DeviceType] {
    get
  }
}
public enum HomeGarden : Swift.Int {
  case appliances
  case entertaining
  case environmentalSafety
  case gardening
  case homeRepair
  case homeTheater
  case interiorDecorating
  case landscaping
  case remodelingConstruction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.HomeGarden : Swift.CaseIterable {
  public typealias AllCases = [Vmax.HomeGarden]
  public static var allCases: [Vmax.HomeGarden] {
    get
  }
}
@objc public class VmaxPagesHomeGarden : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.HomeGarden)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VmaxRegistry : ObjectiveC.NSObject {
  public static var shared: Vmax.VmaxRegistry
  public func addVmaxAd(vmaxAds: [Vmax.VmaxAd.Type])
  public func registerViewability(viewability: Vmax.VmaxAdViewability.Type)
  public func getViewability() -> Vmax.VmaxAdViewability?
  public func getViewabilityVersion() -> Swift.String?
  public func add(layout: Vmax.VmaxLayout, key: Swift.String)
  @objc deinit
}
public enum TechnologyComputing : Swift.Int {
  case graphics3d
  case animation
  case antivirusSoftware
  case cCplusplus
  case camerasCamcorders
  case cellPhones
  case computerCertification
  case computerNetworking
  case computerPeripherals
  case computerReviews
  case dataCenters
  case databases
  case desktopPublishing
  case desktopVideo
  case email
  case graphicsSoftware
  case homeVideoDvd
  case internetTechnology
  case java
  case javascript
  case macSupport
  case mp3Midi
  case netConferencing
  case netForBeginners
  case networkSecurity
  case palmtopsPdas
  case pcSupport
  case portable
  case entertainment
  case sharewareFreeware
  case unix
  case visualBasic
  case webClipArt
  case webDesignHtml
  case webSearch
  case windows
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.TechnologyComputing : Swift.CaseIterable {
  public typealias AllCases = [Vmax.TechnologyComputing]
  public static var allCases: [Vmax.TechnologyComputing] {
    get
  }
}
@objc public class VmaxPagesTechnologyComputing : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.TechnologyComputing)
  @objc deinit
}
public enum Shopping : Swift.Int {
  case contestsFreebies
  case couponing
  case comparison
  case engines
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Shopping : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Shopping]
  public static var allCases: [Vmax.Shopping] {
    get
  }
}
@objc public class VmaxPagesShopping : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.Shopping)
  @objc deinit
}
public struct ResponseBid : Swift.Codable {
  public enum Mtype : Swift.Int, Swift.Codable {
    case _1
    case _2
    case _3
    case _4
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var _id: Swift.String
  public var impid: Swift.String
  public var mtype: Vmax.ResponseBid.Mtype?
  public var dur: Swift.Int?
  public var nurl: Swift.String?
  public var lurl: Swift.String?
  public var adm: Swift.String?
  public var adid: Swift.Int?
  public var cid: Swift.Int?
  public var w: Swift.Int?
  public var h: Swift.Int?
  public var ext: Vmax.ResponseMainAdExtMeta?
  public init(_id: Swift.String, impid: Swift.String, mtype: Vmax.ResponseBid.Mtype? = nil, dur: Swift.Int? = nil, nurl: Swift.String? = nil, lurl: Swift.String? = nil, adm: Swift.String? = nil, adid: Swift.Int? = nil, cid: Swift.Int? = nil, w: Swift.Int? = nil, h: Swift.Int? = nil, ext: Vmax.ResponseMainAdExtMeta? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case impid
    case mtype
    case dur
    case nurl
    case lurl
    case adm
    case adid
    case cid
    case w
    case h
    case ext
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Orientation : Swift.Int {
  case unknown
  case potrait
  case landscape
  case adaptive
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Orientation : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Orientation]
  public static var allCases: [Vmax.Orientation] {
    get
  }
}
public enum Travel : Swift.Int {
  case adventureTravel
  case africa
  case airTravel
  case australiaNewZealand
  case bedBreakfasts
  case budgetTravel
  case businessTravel
  case byUsLocale
  case camping
  case canada
  case caribbean
  case cruises
  case easternEurope
  case europe
  case france
  case greece
  case honeymoonsGetaways
  case hotels
  case italy
  case japan
  case mexicoCentralAmerica
  case nationalParks
  case southAmerica
  case spas
  case themeParks
  case travelingWithKids
  case unitedKingdom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Travel : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Travel]
  public static var allCases: [Vmax.Travel] {
    get
  }
}
@objc public class VmaxPagesTravel : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.Travel)
  @objc deinit
}
public enum Business : Swift.Int {
  case advertising
  case agriculture
  case biotechBiomedical
  case businessSoftware
  case construction
  case forestry
  case government
  case greenSolutions
  case humanResources
  case logistics
  case marketing
  case metals
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Business : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Business]
  public static var allCases: [Vmax.Business] {
    get
  }
}
@objc public class VmaxPagesBusiness : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.Business)
  @objc deinit
}
public protocol VmaxAdViewability : ObjectiveC.NSObject {
  func register(dict: Foundation.NSDictionary)
  func startSession(dict: Foundation.NSDictionary)
  func emitEvent(name: Swift.String, dict: Foundation.NSDictionary?)
  func endSession()
  static func getVersion() -> Swift.String
}
public protocol VmaxViewabilityInterface {
  func add(viewability: Vmax.VmaxAdViewability)
}
public enum AdClickBrowser : Swift.Int {
  case embedded
  case native
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.AdClickBrowser : Swift.CaseIterable {
  public typealias AllCases = [Vmax.AdClickBrowser]
  public static var allCases: [Vmax.AdClickBrowser] {
    get
  }
}
public struct RequestusermetaGeo : Swift.Codable {
  public enum ModelType : Swift.Int, Swift.Codable {
    case _1
    case _2
    case _3
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var type: Vmax.RequestusermetaGeo.ModelType?
  public var country: Swift.String?
  public var region: Swift.String?
  public var city: Swift.String?
  public var zip: Swift.String?
  public init(type: Vmax.RequestusermetaGeo.ModelType? = nil, country: Swift.String? = nil, region: Swift.String? = nil, city: Swift.String? = nil, zip: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class VmaxManager {
  public static var shared: Vmax.VmaxManager
  @objc deinit
}
extension Vmax.VmaxManager {
  public func initialize(appId: Swift.Int, delegate: Vmax.VmaxInitializationStatusListener)
  public func createVmaxAdSpace(tagId: Swift.String) -> Vmax.VmaxAdSpace?
  public func createVmaxAdspotRequestBuilder() -> Vmax.VmaxAdspotRequestBuilder
  public func process(vmaxRequest: Vmax.VmaxRequest)
  public func getVmaxUser() -> Vmax.VmaxUser
  public func getVmaxApplication() -> Vmax.VmaxApplication
  public func getVmaxDevice() -> Vmax.VmaxDevice
  public func getVmaxDeviceGeo() -> Vmax.VmaxDeviceGeo
  public func getVmaxRegistry() -> Vmax.VmaxRegistry
  public func getVersion() -> Swift.String
}
public enum IllegalContent : Swift.Int {
  case illegaleContent
  case warez
  case spywareMalware
  case copyrightinfringement
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.IllegalContent : Swift.CaseIterable {
  public typealias AllCases = [Vmax.IllegalContent]
  public static var allCases: [Vmax.IllegalContent] {
    get
  }
}
@objc public class VmaxPagesIllegalContent : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.IllegalContent)
  @objc deinit
}
public struct ResponseSeatbidExtMeta : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ResponseFallback2ExtMeta : Swift.Codable {
  public enum ModelType : Swift.String, Swift.Codable {
    case remote
    case local
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: Vmax.ResponseFallback2ExtMeta.ModelType?
  public var adMeta: Vmax.AdMeta?
  public var modules: Vmax.Modules?
  public init(type: Vmax.ResponseFallback2ExtMeta.ModelType? = nil, adMeta: Vmax.AdMeta? = nil, modules: Vmax.Modules? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case adMeta
    case modules
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VmaxDirectSelectRequestBuilder : Vmax.VMaxRequestBuilder {
  @objc deinit
}
public struct ResponsemainadextmetaAdmetaCampaignmetaOrder : Swift.Codable {
  public var _id: Swift.String?
  public var name: Swift.String?
  public init(_id: Swift.String? = nil, name: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
open class VmaxError : Swift.Error {
  final public let code: Swift.Int
  final public let errorDescription: Swift.String
  final public let recoveryMessage: Swift.String
  public init(code: Swift.Int, errorDescription: Swift.String, recoveryMessage: Swift.String)
  @objc deinit
}
extension Vmax.VmaxError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum VmaxLogType : Swift.String {
  case debug
  case error
  case info
  case verbose
  case warning
  case severe
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public func log(_ mes: Swift.String, _ type: Vmax.VmaxLogType = .info, lNo: Swift.Int = #line, fun: Swift.String = #function, file: Swift.String = #file)
public enum AdBreakState {
  case request
  case ready
  case started
  case complete
  case failed
  public static func == (a: Vmax.AdBreakState, b: Vmax.AdBreakState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RequestimpextmetaFilters : Swift.Codable {
  public var directSelect: Vmax.RequestimpextmetaFiltersDirectselect?
  public init(directSelect: Vmax.RequestimpextmetaFiltersDirectselect? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case directSelect
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
final public class VmaxSDKError : Vmax.VmaxError {
  public enum Codes : Swift.Int {
    case adManagerInitFailed
    case prepareVmaxAdFailed
    case adRequestBlockedByAdvisor
    case invalidAdSpaces
    case prepareVmaxAdAssetFailed
    case renditionAssetFailed
    case invalidCTAurl
    case universalLinkFailed
    case requestAttributeBuilderEmpty
    case requestAttributeValueNotSetForKey
    case requestAttributesMissing
    case requestAttributesValueCastMismatch
    case requestAttributesKeyNotFoundInBuilder
    case requestAttributesValueInvalid
    case adspacesCountZero
    case adRequestBuildBodyFailed
    case renditionFailed
    case adRequestResponseFailed
    case invalidUserAgent
    case executionStopped
    case assetHelperNotInMemory
    case assetDelegateNotInMemory
    case vppNotInMemory
    case containerIsMissingParentViewController
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(code: Vmax.VmaxSDKError.Codes)
  public init(code: Vmax.VmaxSDKError.Codes, errorDescription: Swift.String)
  public init(code: Vmax.VmaxSDKError.Codes, errorDescription: Swift.String, recoveryMessage: Swift.String)
  @objc deinit
}
@objc public class VmaxCTAHandler : ObjectiveC.NSObject {
  public init(urls: [Swift.String], viewControllerToPresent: UIKit.UIViewController, delegate: Vmax.VmaxCTAHandlerEvents, adClickBrowser: Vmax.AdClickBrowser)
  public func open()
  @objc deinit
}
extension Vmax.VmaxCTAHandler : Vmax.VmaxCTAHandlerEvents {
  public func onSuccessRedirect(event: Vmax.VmaxCTAaction)
  public func onFailureRedirect(error: Vmax.VmaxError)
  public func onCompleteCTA()
}
public struct ModelResponse : Swift.Codable {
  public var bidid: Swift.String?
  public var ext: Vmax.ResponseExtMeta?
  public var seatbid: [Vmax.ResponseSeatbid]?
  public init(bidid: Swift.String? = nil, ext: Vmax.ResponseExtMeta? = nil, seatbid: [Vmax.ResponseSeatbid]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol ViewPortManager {
  func getParentWindow(from view: UIKit.UIView) -> UIKit.UIView?
  func getParentScrollViews(from view: UIKit.UIView) -> [UIKit.UIView]
  func addObserverToScrollViews()
  func removeObserverFromScrollViews()
  func isViewVisible(view: UIKit.UIView) -> Swift.Bool
}
extension Vmax.ViewPortManager {
  public func getParentWindow(from view: UIKit.UIView) -> UIKit.UIView?
  public func getParentScrollViews(from view: UIKit.UIView) -> [UIKit.UIView]
  public func isViewVisible(view: UIKit.UIView) -> Swift.Bool
}
public enum VmaxHttpMethod : Swift.String {
  case get
  case post
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VmaxHttpClientModel {
  public init(endpoint: Swift.String)
  public init(endpoint: Swift.String, method: Vmax.VmaxHttpMethod)
  public init(endpoint: Swift.String, method: Vmax.VmaxHttpMethod, body: Foundation.Data)
}
public enum News : Swift.Int {
  case internationalNews
  case nationalNews
  case localNews
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.News : Swift.CaseIterable {
  public typealias AllCases = [Vmax.News]
  public static var allCases: [Vmax.News] {
    get
  }
}
@objc public class VmaxPagesNews : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.News)
  @objc deinit
}
public struct RequestextmetaModules : Swift.Codable {
  public var operations: [Swift.String]?
  public var adsignatures: [Swift.String]
  public init(operations: [Swift.String]? = nil, adsignatures: [Swift.String])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Gender : Swift.Int {
  case male
  case female
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Gender : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Gender]
  public static var allCases: [Vmax.Gender] {
    get
  }
}
public enum PersonalFinance : Swift.Int {
  case beginningInvesting
  case creditDebtLoans
  case financialNews
  case financialPlanning
  case hedgeFund
  case insurance
  case investing
  case mutualFunds
  case options
  case retirementPlanning
  case stocks
  case taxPlanning
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.PersonalFinance : Swift.CaseIterable {
  public typealias AllCases = [Vmax.PersonalFinance]
  public static var allCases: [Vmax.PersonalFinance] {
    get
  }
}
@objc public class VmaxPagesPersonalFinance : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.PersonalFinance)
  @objc deinit
}
public enum VmaxVastEvent : Swift.String {
  case impression
  case click
  case complete
  case start
  case firstQuartile
  case midpoint
  case thirdQuartile
  case mute
  case unmute
  case pause
  case resume
  case fullscreen
  case exitfullscreen
  case close
  case skip
  case skippableStateChange
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Vmax.VmaxVastEvent : Swift.CaseIterable {
  public typealias AllCases = [Vmax.VmaxVastEvent]
  public static var allCases: [Vmax.VmaxVastEvent] {
    get
  }
}
public struct RequestBody : Swift.Codable {
  public var allimps: Swift.Int?
  public var imp: Vmax.RequestImpMeta
  public var app: Vmax.RequestAppMeta?
  public var device: Vmax.RequestDeviceMeta?
  public var user: Vmax.RequestUserMeta?
  public var source: Vmax.RequestSourceMeta?
  public var ext: Vmax.RequestExtMeta
  public init(imp: Vmax.RequestImpMeta, app: Vmax.RequestAppMeta? = nil, device: Vmax.RequestDeviceMeta? = nil, user: Vmax.RequestUserMeta? = nil, source: Vmax.RequestSourceMeta? = nil, allimps: Swift.Int? = nil, ext: Vmax.RequestExtMeta)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ResponseSeatbid : Swift.Codable {
  public enum Group : Swift.Int, Swift.Codable {
    case _0
    case _1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var seat: Swift.String?
  public var group: Vmax.ResponseSeatbid.Group?
  public var ext: Vmax.ResponseSeatbidExtMeta?
  public var bid: [Vmax.ResponseBid]?
  public init(seat: Swift.String? = nil, group: Vmax.ResponseSeatbid.Group? = nil, ext: Vmax.ResponseSeatbidExtMeta? = nil, bid: [Vmax.ResponseBid]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension CoreGraphics.CGAffineTransform {
  public init(from source: CoreGraphics.CGRect, to destination: CoreGraphics.CGRect)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func findViewController() -> UIKit.UIViewController?
}
extension Swift.Array where Element : Swift.Comparable {
  public func containsSameElements(as other: [Element]) -> Swift.Bool
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var heightConstraint: UIKit.NSLayoutConstraint? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var widthConstraint: UIKit.NSLayoutConstraint? {
    get
    set
  }
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor(unsafe) public var parentViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var parentView: UIKit.UIView? {
    get
  }
}
public enum Science : Swift.Int {
  case astrology
  case bviology
  case chemistry
  case geology
  case paranormalPhenomena
  case physics
  case spaceAstronomy
  case geography
  case botany
  case weather
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Science : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Science]
  public static var allCases: [Vmax.Science] {
    get
  }
}
@objc public class VmaxPagesScience : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.Science)
  @objc deinit
}
public protocol VmaxCTAHandlerEvents : AnyObject {
  func onSuccessRedirect(event: Vmax.VmaxCTAaction)
  func onFailureRedirect(error: Vmax.VmaxError)
  func onCompleteCTA()
}
public protocol VmaxCtaHelper {
  init(url: Swift.String, event: Vmax.VmaxCTAHandlerEvents, viewController: UIKit.UIViewController)
  func open()
}
public struct RequestimpmetaInner : Swift.Codable {
  public enum Secure : Swift.Int, Swift.Codable {
    case _0
    case _1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Clickbrowser : Swift.Int, Swift.Codable {
    case _0
    case _1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Displaymanager : Swift.String, Swift.Codable {
    case vmax
    case hotstar
    case airtel
    case zee5
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Instl : Swift.Int, Swift.Codable {
    case _0
    case _1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var tagid: Swift.String
  public var secure: Vmax.RequestimpmetaInner.Secure?
  public var clickbrowser: Vmax.RequestimpmetaInner.Clickbrowser?
  public var displaymanager: Vmax.RequestimpmetaInner.Displaymanager?
  public var displaymanagerver: Swift.String?
  public var instl: Vmax.RequestimpmetaInner.Instl?
  public var ext: Vmax.RequestImpExtMeta?
  public init(tagid: Swift.String, secure: Vmax.RequestimpmetaInner.Secure? = nil, clickbrowser: Vmax.RequestimpmetaInner.Clickbrowser? = nil, displaymanager: Vmax.RequestimpmetaInner.Displaymanager? = nil, displaymanagerver: Swift.String? = nil, instl: Vmax.RequestimpmetaInner.Instl? = nil, ext: Vmax.RequestImpExtMeta? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VmaxAdBreakRequestBuilder : Vmax.VMaxRequestBuilder {
  @objc deinit
}
public struct Modules : Swift.Codable {
  public var render: Vmax.ModulesRender?
  public var customEventTrackers: Swift.String?
  public init(render: Vmax.ModulesRender? = nil, customEventTrackers: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case render
    case customEventTrackers
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class VmaxUser {
  @objc deinit
}
extension Vmax.VmaxUser {
  public func setId(id: Swift.String)
  public func setGender(gender: Vmax.Gender)
  public func setAge(age: Swift.String)
  public func setCity(city: Swift.String)
  public func setRegion(region: Swift.String)
  public func setCountry(country: Swift.String)
  public func setZipCode(zipCode: Swift.Int)
  public func setKeywords(keywords: [Swift.String])
}
public protocol VmaxAdAssetHelper : ObjectiveC.NSObject {
  func set<T>(delegate: T) where T : Vmax.VmaxAdAssetDelegate
  func prepare<T>(data: T)
  func show<T>(container: T)
  func getAssetView() -> UIKit.UIView?
  func setLayout(layout: Vmax.VmaxLayout)
  func set(adClickBrowser: Vmax.AdClickBrowser)
  func set(adInteractionState: Vmax.InteractionState)
  func pause()
  func resume()
  func close()
}
public enum InteractionState {
  case sdk
  case user
  case none
  public static func == (a: Vmax.InteractionState, b: Vmax.InteractionState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Vmax.VmaxAdAssetHelper {
  public func setLayout(layout: Vmax.VmaxLayout)
  public func set(adClickBrowser: Vmax.AdClickBrowser)
  public func set(adInteractionState: Vmax.InteractionState)
}
public protocol VmaxAdAssetDelegate : AnyObject {
  func onPrepared<T>(asset: Vmax.VmaxAdAssetHelper, result: T)
  func onPrepareFailed(asset: Vmax.VmaxAdAssetHelper, error: Vmax.VmaxError)
  func onRendered<T>(asset: Vmax.VmaxAdAssetHelper, result: T)
  func onRenderFailed(asset: Vmax.VmaxAdAssetHelper, error: Vmax.VmaxError)
  func onClicked(asset: Vmax.VmaxAdAssetHelper)
  func onClickedComplete(asset: Vmax.VmaxAdAssetHelper)
  func onClosed(asset: Vmax.VmaxAdAssetHelper)
}
public protocol VmaxWebAssetDelegate : Vmax.VmaxAdAssetDelegate {
}
public enum Careers : Swift.Int {
  case careerPlanning
  case college
  case financialAid
  case jobFairs
  case jobSearch
  case resumeWritingAdvice
  case nursing
  case scholarships
  case telecommuting
  case usMilitary
  case careerAdvice
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Careers : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Careers]
  public static var allCases: [Vmax.Careers] {
    get
  }
}
@objc public class VmaxPagesCareers : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.Careers)
  @objc deinit
}
public protocol VmaxAdEventDelegate : AnyObject {
  func onAdReady(vmaxAdSpace: Vmax.VmaxAdSpace)
  func onAdError(vmaxAdSpace: Vmax.VmaxAdSpace, vmaxError: Vmax.VmaxError)
  func onAdRender(vmaxAdSpace: Vmax.VmaxAdSpace)
  func onAdClick(vmaxAdSpace: Vmax.VmaxAdSpace)
  func onAdClose(vmaxAdSpace: Vmax.VmaxAdSpace)
}
public enum Education : Swift.Int {
  case education7to12
  case adultEducation
  case artHistory
  case colledgeAdministration
  case collegeLife
  case distanceLearning
  case englishAsA2ndLanguage
  case languageLearning
  case graduateSchool
  case homeschooling
  case homeworkStudyTips
  case k6Educators
  case privateSchool
  case specialEducation
  case studyingBusiness
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Education : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Education]
  public static var allCases: [Vmax.Education] {
    get
  }
}
@objc public class VmaxPagesEducation : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.Education)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VmaxDevice {
  @objc deinit
}
extension Vmax.VmaxDevice {
  public func setConnectionType(connectionType: Vmax.ConnectionType)
  public func getDeviceType() -> Vmax.DeviceType?
  public func getConnectionType() -> Vmax.ConnectionType?
  public func setDeviceMake(make: Swift.String)
  public func setDeviceModel(model: Swift.String)
  public func setDeviceOS(operatingSystem: Swift.String)
  public func setDeviceOSVersion(version: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VmaxDeviceGeo : ObjectiveC.NSObject {
  @objc deinit
}
extension Vmax.VmaxDeviceGeo {
  public func setLocation(location: CoreLocation.CLLocation)
}
extension Vmax.VmaxDeviceGeo : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
}
public struct ModelError : Swift.Codable {
  public var _id: Swift.String
  public var nbr: Swift.Int
  public init(_id: Swift.String, nbr: Swift.Int)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case nbr
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum VmaxSections : Swift.Int {
  case artsEntertainment
  case automotive
  case business
  case careers
  case education
  case familyParenting
  case healthFitness
  case foodDrink
  case hobbiesInterests
  case homeGarden
  case lawGovtPolitics
  case news
  case personalFinance
  case society
  case science
  case pets
  case sports
  case styleFashion
  case technologyComputing
  case travel
  case realEstate
  case shopping
  case religionSpirituality
  case nonStandardContent
  case illegalContent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.VmaxSections : Swift.CaseIterable {
  public typealias AllCases = [Vmax.VmaxSections]
  public static var allCases: [Vmax.VmaxSections] {
    get
  }
}
public struct RequestUserMeta : Swift.Codable {
  public var _id: Swift.String?
  public var kwarray: [Swift.String]?
  public var geo: Vmax.RequestusermetaGeo?
  public var data: [Vmax.RequestusermetaData]?
  public init(_id: Swift.String? = nil, kwarray: [Swift.String]? = nil, geo: Vmax.RequestusermetaGeo? = nil, data: [Vmax.RequestusermetaData]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case kwarray
    case geo
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ResponsemainadextmetaAdmetaCampaignmetaMarketer : Swift.Codable {
  public var _id: Swift.String?
  public var name: Swift.String?
  public var brand: Swift.String?
  public var agency: Swift.String?
  public init(_id: Swift.String? = nil, name: Swift.String? = nil, brand: Swift.String? = nil, agency: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case name
    case brand
    case agency
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol VmaxLayout : UIKit.UIView {
  func getNibName() -> Swift.String
  func getParentContainer() -> UIKit.UIView?
  func setUpNib() throws
  func setUpInitialState()
  func set(delegate: Vmax.VmaxLayoutDelegate)
}
public protocol VmaxLayoutDelegate : AnyObject {
  func onAdClick()
}
extension Vmax.VmaxLayout {
  public func getNibName() -> Swift.String
  public func getParentContainer() -> UIKit.UIView?
  public func setUpNib() throws
  public func setUpInitialState()
  public func set(delegate: Vmax.VmaxLayoutDelegate)
}
public enum AdPosition : Swift.Int {
  case unknown
  case aboveTheFold
  case deprecated
  case belowTheFold
  case header
  case footer
  case sidebar
  case fullScreen
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.AdPosition : Swift.CaseIterable {
  public typealias AllCases = [Vmax.AdPosition]
  public static var allCases: [Vmax.AdPosition] {
    get
  }
}
public enum VmaxCTAaction {
  case native
  case embedded
  case deepLink
  case operation
  public static func == (a: Vmax.VmaxCTAaction, b: Vmax.VmaxCTAaction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StyleFashion : Swift.Int {
  case beauty
  case bodyArt
  case fashion
  case jewelry
  case clothing
  case accessories
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.StyleFashion : Swift.CaseIterable {
  public typealias AllCases = [Vmax.StyleFashion]
  public static var allCases: [Vmax.StyleFashion] {
    get
  }
}
@objc public class VmaxPagesStyleFashion : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.StyleFashion)
  @objc deinit
}
public struct RequestAppMeta : Swift.Codable {
  public var _id: Swift.String
  public var ver: Swift.String?
  public var sectioncat: [Swift.String]?
  public var pagecat: [Swift.String]?
  public var kwarray: [Swift.String]?
  public var ext: Vmax.RequestAppExtMeta?
  public init(_id: Swift.String, ver: Swift.String? = nil, sectioncat: [Swift.String]? = nil, pagecat: [Swift.String]? = nil, kwarray: [Swift.String]? = nil, ext: Vmax.RequestAppExtMeta? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case ver
    case sectioncat
    case pagecat
    case kwarray
    case ext
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RequestSourceExtMeta : Swift.Codable {
  public var omidpv: Swift.Int?
  public init(omidpv: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AdBreakSkipBehaviour : Swift.Int {
  case defaultBehaviour
  case nonSkippable
  case skipToNext
  case skipAll
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.AdBreakSkipBehaviour : Swift.CaseIterable {
  public typealias AllCases = [Vmax.AdBreakSkipBehaviour]
  public static var allCases: [Vmax.AdBreakSkipBehaviour] {
    get
  }
}
public enum VmaxClientError : Swift.Error {
  case badURL
  case unknownError
  case errorHttpResponse
  case notFound
  case unknownResponseCode
  case invalidData
  public static func == (a: Vmax.VmaxClientError, b: Vmax.VmaxClientError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Society : Swift.Int {
  case dating
  case divorceSupport
  case gayLife
  case marriage
  case seniorLiving
  case teens
  case weddings
  case ethnicSpecific
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Society : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Society]
  public static var allCases: [Vmax.Society] {
    get
  }
}
@objc public class VmaxPagesSociety : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.Society)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VmaxApplication {
  @objc deinit
}
extension Vmax.VmaxApplication {
  public func addPageCategory(pageCategory: Vmax.VmaxPages)
  public func addSectionCategory(sectionCategory: Vmax.VmaxSections)
  public func setCustomData(customData: [Swift.String : Swift.String])
  public func setKeywords(keywords: [Swift.String])
}
public enum ReligionSpirituality : Swift.Int {
  case alternativeReligions
  case atheismAgnosticism
  case buddhism
  case catholicism
  case christianity
  case hinduism
  case islam
  case judaism
  case latterDaySaints
  case paganWiccan
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.ReligionSpirituality : Swift.CaseIterable {
  public typealias AllCases = [Vmax.ReligionSpirituality]
  public static var allCases: [Vmax.ReligionSpirituality] {
    get
  }
}
@objc public class VmaxPagesReligionSpirituality : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.ReligionSpirituality)
  @objc deinit
}
public struct RequestdevicemetaGeo : Swift.Codable {
  public enum ModelType : Swift.Int, Swift.Codable {
    case _1
    case _2
    case _3
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var type: Vmax.RequestdevicemetaGeo.ModelType?
  public var ipservice: Swift.Int?
  public var country: Swift.String?
  public var region: Swift.String?
  public var city: Swift.String?
  public var zip: Swift.String?
  public var lat: Foundation.Decimal?
  public var lon: Foundation.Decimal?
  public var accuracy: Swift.Int?
  public var lastfix: Swift.Int?
  public var utcoffset: Swift.Int?
  public var ext: Vmax.RequestGeoExtMeta?
  public init(type: Vmax.RequestdevicemetaGeo.ModelType? = nil, ipservice: Swift.Int? = nil, country: Swift.String? = nil, region: Swift.String? = nil, city: Swift.String? = nil, zip: Swift.String? = nil, lat: Foundation.Decimal? = nil, lon: Foundation.Decimal? = nil, accuracy: Swift.Int? = nil, lastfix: Swift.Int? = nil, utcoffset: Swift.Int? = nil, ext: Vmax.RequestGeoExtMeta? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AdMeta : Swift.Codable {
  public var _id: Swift.Int?
  public var name: Swift.String?
  public var campaignMeta: Vmax.ResponsemainadextmetaAdmetaCampaignmeta?
  public init(_id: Swift.Int? = nil, name: Swift.String? = nil, campaignMeta: Vmax.ResponsemainadextmetaAdmetaCampaignmeta? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case name
    case campaignMeta
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RequestGeoExtMeta : Swift.Codable {
  public var lac: Swift.Int?
  public var timestamp: Swift.Int?
  public init(lac: Swift.Int? = nil, timestamp: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol VmaxCompanionEventListener {
  func set(companionEvents: Vmax.VmaxCompanionEvents)
}
public protocol VmaxCompanionEvents : AnyObject {
  func onCompanionReady<T>(obj: T)
  func onCompanionRender<T>(obj: T)
  func onCompanionClose<T>(obj: T)
  func onCompanionClick<T>(obj: T)
  func onCompanionError<T>(obj: T, error: Vmax.VmaxError)
  func onCompanionSkip<T>(obj: T)
}
public protocol VmaxCompanionParams {
  func set(adParameters width: Swift.Int?, height: Swift.Int?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VMaxRequestBuilder : ObjectiveC.NSObject {
  @objc deinit
  @discardableResult
  public func addAdSpace(adSpace: Vmax.VmaxAdSpace) -> Vmax.VMaxRequestBuilder
  @discardableResult
  public func setTimeout(timeout: Swift.Int) -> Vmax.VMaxRequestBuilder
  @discardableResult
  public func setCache(cacheEnabled: Swift.Bool) -> Vmax.VMaxRequestBuilder
  @discardableResult
  public func setRetry(attemptCount: Swift.Int) -> Vmax.VMaxRequestBuilder
  public func build() -> Vmax.VmaxRequest
}
public struct RequestCustomKeys : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RequestExtMeta : Swift.Codable {
  public var api: [Swift.Int]?
  public var modules: Vmax.RequestextmetaModules
  public init(api: [Swift.Int]? = nil, modules: Vmax.RequestextmetaModules)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum VmaxApis : Swift.Int {
  case vpaid1
  case vpaid2
  case mraid1
  case ormma
  case mraid2
  case mraid3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.VmaxApis : Swift.CaseIterable {
  public typealias AllCases = [Vmax.VmaxApis]
  public static var allCases: [Vmax.VmaxApis] {
    get
  }
}
public struct ResponseFallback1ExtMeta : Swift.Codable {
  public enum ModelType : Swift.String, Swift.Codable {
    case remote
    case local
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: Vmax.ResponseFallback1ExtMeta.ModelType?
  public var adMeta: Vmax.AdMeta?
  public var modules: Vmax.Modules?
  public var fallback: Vmax.Responsefallback1extmetaFallback?
  public init(type: Vmax.ResponseFallback1ExtMeta.ModelType? = nil, adMeta: Vmax.AdMeta? = nil, modules: Vmax.Modules? = nil, fallback: Vmax.Responsefallback1extmetaFallback? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case adMeta
    case modules
    case fallback
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ResponsemainadextmetaFallback : Swift.Codable {
  public var _id: Swift.Int?
  public var impid: Swift.String?
  public var nurl: Swift.String?
  public var lurl: Swift.String?
  public var adm: Swift.String?
  public var adid: Swift.Int?
  public var cid: Swift.Int?
  public var w: Swift.Int?
  public var h: Swift.Int?
  public var ext: Vmax.ResponseFallback1ExtMeta?
  public init(_id: Swift.Int? = nil, impid: Swift.String? = nil, nurl: Swift.String? = nil, lurl: Swift.String? = nil, adm: Swift.String? = nil, adid: Swift.Int? = nil, cid: Swift.Int? = nil, w: Swift.Int? = nil, h: Swift.Int? = nil, ext: Vmax.ResponseFallback1ExtMeta? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case impid
    case nurl
    case lurl
    case adm
    case adid
    case cid
    case w
    case h
    case ext
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RequestAppExtMeta : Swift.Codable {
  public enum Orientation : Swift.Int, Swift.Codable {
    case number1
    case _1
    case _2
    case _3
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var orientation: Vmax.RequestAppExtMeta.Orientation?
  public var customkeys: Vmax.RequestCustomKeys?
  public init(orientation: Vmax.RequestAppExtMeta.Orientation? = nil, customkeys: Vmax.RequestCustomKeys? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class VmaxHttpClient : ObjectiveC.NSObject {
  public init(vmaxHttpClientModel: Vmax.VmaxHttpClientModel)
  public func fetch(completionHandler: @escaping (Swift.Result<Foundation.Data, Vmax.VmaxClientError>) -> Swift.Void)
  @objc deinit
}
public enum NonStandardContent : Swift.Int {
  case unmoderatedUgc
  case extremeGraphicViolence
  case pornography
  case profaneContent
  case hateContent
  case underConstruction
  case incentivized
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.NonStandardContent : Swift.CaseIterable {
  public typealias AllCases = [Vmax.NonStandardContent]
  public static var allCases: [Vmax.NonStandardContent] {
    get
  }
}
@objc public class VmaxPagesNonStandardContent : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.NonStandardContent)
  @objc deinit
}
public enum AdBreakRecurrence : Swift.Int {
  case consequtiveCampaignRepeatNotAllowed
  case consequtiveCampaignRepeatAllowed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.AdBreakRecurrence : Swift.CaseIterable {
  public typealias AllCases = [Vmax.AdBreakRecurrence]
  public static var allCases: [Vmax.AdBreakRecurrence] {
    get
  }
}
public protocol VmaxPages : AnyObject {
  var stringValue: Swift.String { get }
}
public enum ArtsEntertainment : Swift.Int {
  case booksLiterature
  case celebrityFanGossip
  case fineArt
  case humor
  case movies
  case music
  case television
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.ArtsEntertainment : Swift.CaseIterable {
  public typealias AllCases = [Vmax.ArtsEntertainment]
  public static var allCases: [Vmax.ArtsEntertainment] {
    get
  }
}
@objc public class VmaxPagesArtsEntertainment : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.ArtsEntertainment)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VmaxAdSpace {
  @objc deinit
}
extension Vmax.VmaxAdSpace {
  public func setSpaceOrientation(orientation: Vmax.Orientation)
  public func setClickBrowser(type: Vmax.AdClickBrowser)
  public func setAdPosition(adPosition: Vmax.AdPosition)
  public func setInterstitialExperience(interstitialExperience: Swift.Bool)
  public func setadEventDelegate(adEventDelegate: Vmax.VmaxAdEventDelegate)
  public func setVmaxMediaEvents(mediaEvents: Vmax.VmaxMediaEvents)
  public func setVmaxCompanionEvents(companionEvents: Vmax.VmaxCompanionEvents)
  public func setLayout(layout: Vmax.VmaxLayout)
  public func showAd(container: UIKit.UIView)
  public func getTagId() -> Swift.String
  public func pause()
  public func resume()
  public func close()
  public func set(breakListener: Vmax.AdBreakDelegate, breakProperties: Vmax.AdBreakProperties?)
}
extension Vmax.VmaxAdSpace : Vmax.VmaxAdDelegate {
  public func onLoadSuccess(vmaxAd: Vmax.VmaxAd)
  public func onLoadFailure(vmaxAd: Vmax.VmaxAd, vmaxError: Vmax.VmaxError)
  public func onRenderSuccess(vmaxAd: Vmax.VmaxAd)
  public func onRenderFailure(vmaxAd: Vmax.VmaxAd, vmaxError: Vmax.VmaxError)
  public func onClose(vmaxAd: Vmax.VmaxAd)
  public func onClicked(vmaxAd: Vmax.VmaxAd)
}
public enum LawGovtPolitics : Swift.Int {
  case immigration
  case legalIssues
  case usGovernmentResources
  case politics
  case commentary
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.LawGovtPolitics : Swift.CaseIterable {
  public typealias AllCases = [Vmax.LawGovtPolitics]
  public static var allCases: [Vmax.LawGovtPolitics] {
    get
  }
}
@objc public class VmaxPagesLawGovtPolitics : ObjectiveC.NSObject, Vmax.VmaxPages {
  public var stringValue: Swift.String
  public init(val: Vmax.LawGovtPolitics)
  @objc deinit
}
public class VmaxEventListener {
  public init()
  public func propogateState(adBreakState: Vmax.AdBreakState?, breakListener: Vmax.AdBreakDelegate?, error: Vmax.VmaxError? = nil)
  public func propogateState(vmaxAdState: Vmax.VmaxAdState?, adListener: Vmax.VmaxAdDelegate?, vmaxAd: Vmax.VmaxAd? = nil, error: Vmax.VmaxError? = nil)
  @objc deinit
}
public struct RequestusermetaData : Swift.Codable {
  public var segment: [Vmax.RequestusermetaSegment]?
  public init(segment: [Vmax.RequestusermetaSegment]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol VmaxAdDelegate : AnyObject {
  func onLoadSuccess(vmaxAd: Vmax.VmaxAd)
  func onLoadFailure(vmaxAd: Vmax.VmaxAd, vmaxError: Vmax.VmaxError)
  func onRenderSuccess(vmaxAd: Vmax.VmaxAd)
  func onRenderFailure(vmaxAd: Vmax.VmaxAd, vmaxError: Vmax.VmaxError)
  func onClose(vmaxAd: Vmax.VmaxAd)
  func onClicked(vmaxAd: Vmax.VmaxAd)
}
public protocol VmaxAd : ObjectiveC.NSObject {
  func prepare(adResponse: Swift.String, delegate: Vmax.VmaxAdDelegate)
  func render(container: UIKit.UIView)
  static func getSignatures() -> [Swift.String]
  func setLayout(layout: Vmax.VmaxLayout)
  func set(adClickBrowser: Vmax.AdClickBrowser)
  static func isInterstitial() -> Swift.Bool
  func pause()
  func resume()
  func close()
}
extension Vmax.VmaxAd {
  public func setLayout(layout: Vmax.VmaxLayout)
  public func set(adClickBrowser: Vmax.AdClickBrowser)
  public static func isInterstitial() -> Swift.Bool
}
public enum VmaxAdState {
  case ready
  case failed
  case rendered
  case distort
  case completed
  case click
  public static func == (a: Vmax.VmaxAdState, b: Vmax.VmaxAdState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HealthFitness : Swift.Int {
  case exercise
  case add
  case aidsHiv
  case allergies
  case alternativeMedicine
  case arthritis
  case asthma
  case autismPod
  case bipolarDisorder
  case brainTumor
  case cancer
  case cholesterol
  case chronicFatigueSyndrome
  case chronicPain
  case coldFlu
  case deafness
  case dentalCare
  case depression
  case dermatology
  case diabetes
  case epilepsy
  case gerdAcidReflux
  case headachesMigraines
  case heartDisease
  case herbsForHealth
  case holisticHealing
  case ibsCrohnsDisease
  case incestAbuseSupport
  case incontinence
  case infertility
  case mensHealth
  case nutrition
  case orthopedics
  case panicAnxietyDisorders
  case pediatrics
  case physicalTherapy
  case psychologyPsychiatry
  case senorHealth
  case sexuality
  case sleepDisorders
  case smokingCessation
  case substanceAbuse
  case thyroidDisease
  case weightLoss
  case womensHealth
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.HealthFitness : Swift.CaseIterable {
  public typealias AllCases = [Vmax.HealthFitness]
  public static var allCases: [Vmax.HealthFitness] {
    get
  }
}
@objc public class VmaxPagesHealthFitness : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.HealthFitness)
  @objc deinit
}
public struct RequestImpExtMeta : Swift.Codable {
  public enum Orientation : Swift.Int, Swift.Codable {
    case number1
    case _1
    case _2
    case _3
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var orientation: Vmax.RequestImpExtMeta.Orientation?
  public var filters: Vmax.RequestimpextmetaFilters?
  public init(orientation: Vmax.RequestImpExtMeta.Orientation? = nil, filters: Vmax.RequestimpextmetaFilters? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VmaxAdspotRequestBuilder : Vmax.VMaxRequestBuilder {
  @objc deinit
}
public struct RequestDeviceMeta : Swift.Codable {
  public enum Dnt : Swift.Int, Swift.Codable {
    case _0
    case _1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Devicetype : Swift.Int, Swift.Codable {
    case _1
    case _2
    case _3
    case _4
    case _5
    case _6
    case _7
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Connectiontype : Swift.Int, Swift.Codable {
    case _0
    case _1
    case _2
    case _3
    case _4
    case _5
    case _6
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var ua: Swift.String?
  public var dnt: Vmax.RequestDeviceMeta.Dnt?
  public var lmt: Swift.Int?
  public var devicetype: Vmax.RequestDeviceMeta.Devicetype?
  public var make: Swift.String?
  public var model: Swift.String?
  public var os: Swift.String?
  public var osv: Swift.String?
  public var language: Swift.String?
  public var carrier: Swift.String?
  public var mccmnc: Swift.String?
  public var connectiontype: Vmax.RequestDeviceMeta.Connectiontype?
  public var ifa: Swift.String?
  public var geo: Vmax.RequestdevicemetaGeo?
  public init(ua: Swift.String? = nil, dnt: Vmax.RequestDeviceMeta.Dnt? = nil, lmt: Swift.Int? = nil, devicetype: Vmax.RequestDeviceMeta.Devicetype? = nil, make: Swift.String? = nil, model: Swift.String? = nil, os: Swift.String? = nil, osv: Swift.String? = nil, language: Swift.String? = nil, carrier: Swift.String? = nil, mccmnc: Swift.String? = nil, connectiontype: Vmax.RequestDeviceMeta.Connectiontype? = nil, ifa: Swift.String? = nil, geo: Vmax.RequestdevicemetaGeo? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RequestSourceMeta : Swift.Codable {
  public var ext: Vmax.RequestSourceExtMeta?
  public init(ext: Vmax.RequestSourceExtMeta? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RequestSiteExtMeta : Swift.Codable {
  public var customkeys: Vmax.RequestCustomKeys?
  public init(customkeys: Vmax.RequestCustomKeys? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RequestusermetaSegment : Swift.Codable {
  public var name: Swift.String?
  public var value: Swift.String?
  public init(name: Swift.String? = nil, value: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AdBreakProperties {
  public init()
  public var allowOnlyCompleteAd: Swift.Bool?
  public var maxTime: Swift.Int?
  public var expectedTime: Swift.Int?
}
public protocol AdBreakInterface {
  func set(delegate: Vmax.AdBreakDelegate)
  func set(properties: Vmax.AdBreakProperties)
}
public struct VmaxAdMeta : Swift.Equatable {
  public init()
  public var adId: Swift.String?
  public var adDuration: Swift.Double?
  public var isMediationAd: Swift.Bool?
  public static func == (a: Vmax.VmaxAdMeta, b: Vmax.VmaxAdMeta) -> Swift.Bool
}
public protocol VmaxAdPodInstreamDelegate : AnyObject {
  func update(adBadgeText: Swift.String)
  func getAdDuration() -> Swift.Double?
}
public struct ResponseExtMeta : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Pets : Swift.Int {
  case aquariums
  case birds
  case cats
  case dogs
  case largeAnimals
  case reptiles
  case veterinaryMedicine
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Pets : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Pets]
  public static var allCases: [Vmax.Pets] {
    get
  }
}
@objc public class VmaxPagesPets : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.Pets)
  @objc deinit
}
public class VmaxTracker {
  public init()
  public func addEvent(event: Vmax.VmaxEvent)
  public func fireNotification(eventName: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VmaxRequest : ObjectiveC.NSObject {
  @objc deinit
}
public enum HobbiesInterests : Swift.Int {
  case artTechnology
  case artsCrafts
  case beadwork
  case birdwatching
  case boardGamesPuzzles
  case candleSoapMaking
  case cardGames
  case chess
  case cigars
  case collecting
  case comicBooks
  case drawingSketching
  case freelanceWriting
  case genealogy
  case gettingPublished
  case guitar
  case homeRecording
  case investorsPatents
  case jewelryMaking
  case magicIllusion
  case needlework
  case painting
  case photography
  case radio
  case roleplayingGames
  case sciFiFantasy
  case scrapbooking
  case screenwriting
  case stampsCoins
  case videoComputerGames
  case woodworking
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.HobbiesInterests : Swift.CaseIterable {
  public typealias AllCases = [Vmax.HobbiesInterests]
  public static var allCases: [Vmax.HobbiesInterests] {
    get
  }
}
@objc public class VmaxPagesHobbiesInterests : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.HobbiesInterests)
  @objc deinit
}
public enum Automotive : Swift.Int {
  case autoParts
  case autoRepair
  case buyingSellingCars
  case carCulture
  case certifiedPreOwned
  case convertible
  case coupe
  case crossover
  case diesel
  case electricVehicle
  case hatchback
  case hybrid
  case luxury
  case minivan
  case mororcycles
  case offRoadVehicles
  case performanceVehicles
  case pickup
  case roadSideAssistance
  case sedan
  case trucksAccessories
  case vintageCars
  case wagon
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.Automotive : Swift.CaseIterable {
  public typealias AllCases = [Vmax.Automotive]
  public static var allCases: [Vmax.Automotive] {
    get
  }
}
@objc public class VmaxPagesAutomotive : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.Automotive)
  @objc deinit
}
public struct Responsefallback1extmetaFallback : Swift.Codable {
  public var _id: Swift.Int?
  public var impid: Swift.String?
  public var nurl: Swift.String?
  public var lurl: Swift.String?
  public var adm: Swift.String?
  public var adid: Swift.Int?
  public var cid: Swift.Int?
  public var w: Swift.Int?
  public var h: Swift.Int?
  public var ext: Vmax.ResponseFallback2ExtMeta?
  public init(_id: Swift.Int? = nil, impid: Swift.String? = nil, nurl: Swift.String? = nil, lurl: Swift.String? = nil, adm: Swift.String? = nil, adid: Swift.Int? = nil, cid: Swift.Int? = nil, w: Swift.Int? = nil, h: Swift.Int? = nil, ext: Vmax.ResponseFallback2ExtMeta? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case impid
    case nurl
    case lurl
    case adm
    case adid
    case cid
    case w
    case h
    case ext
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum RealEstate : Swift.Int {
  case apartments
  case architects
  case buyingSellingHomes
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Vmax.RealEstate : Swift.CaseIterable {
  public typealias AllCases = [Vmax.RealEstate]
  public static var allCases: [Vmax.RealEstate] {
    get
  }
}
@objc public class VmaxPagesRealEstate : ObjectiveC.NSObject, Vmax.VmaxPages {
  final public let stringValue: Swift.String
  public init(val: Vmax.RealEstate)
  @objc deinit
}
public struct ModulesRender : Swift.Codable {
  public var signature: Swift.String?
  public var orientation: Swift.Int?
  public init(signature: Swift.String? = nil, orientation: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol AdBreakDelegate : AnyObject {
  func onAdBreakRequest()
  func onAdBreakReady()
  func onAdBreakStart()
  func onAdBreakError(vmaxError: Vmax.VmaxError)
  func onAdBreakClose()
}
public struct ResponsemainadextmetaAdmetaCampaignmeta : Swift.Codable {
  public var _id: Swift.Int?
  public var name: Swift.String?
  public var order: Vmax.ResponsemainadextmetaAdmetaCampaignmetaOrder?
  public var marketer: Vmax.ResponsemainadextmetaAdmetaCampaignmetaMarketer?
  public init(_id: Swift.Int? = nil, name: Swift.String? = nil, order: Vmax.ResponsemainadextmetaAdmetaCampaignmetaOrder? = nil, marketer: Vmax.ResponsemainadextmetaAdmetaCampaignmetaMarketer? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case name
    case order
    case marketer
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ResponseMainAdExtMeta : Swift.Codable {
  public enum ModelType : Swift.String, Swift.Codable {
    case remote
    case local
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: Vmax.ResponseMainAdExtMeta.ModelType?
  public var adMeta: Vmax.ResponsemainadextmetaAdmeta?
  public var modules: Vmax.Modules?
  public var fallback: Vmax.ResponsemainadextmetaFallback?
  public init(type: Vmax.ResponseMainAdExtMeta.ModelType? = nil, adMeta: Vmax.ResponsemainadextmetaAdmeta? = nil, modules: Vmax.Modules? = nil, fallback: Vmax.ResponsemainadextmetaFallback? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case type
    case adMeta
    case modules
    case fallback
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class VmaxTimer : ObjectiveC.NSObject {
  public init(timeInterval: Foundation.TimeInterval, target: Any, callBack: ObjectiveC.Selector)
  @objc deinit
  public func remainingDurationInSeconds() -> Swift.Int
  public func stop()
  public func pause()
  public func resume()
}
extension Vmax.VmaxAdAssetType : Swift.Equatable {}
extension Vmax.VmaxAdAssetType : Swift.Hashable {}
extension Vmax.RequestSiteMeta.CodingKeys : Swift.Equatable {}
extension Vmax.RequestSiteMeta.CodingKeys : Swift.Hashable {}
extension Vmax.RequestSiteMeta.CodingKeys : Swift.RawRepresentable {}
extension Vmax.FamilyParenting : Swift.Equatable {}
extension Vmax.FamilyParenting : Swift.Hashable {}
extension Vmax.FamilyParenting : Swift.RawRepresentable {}
extension Vmax.Sports : Swift.Equatable {}
extension Vmax.Sports : Swift.Hashable {}
extension Vmax.Sports : Swift.RawRepresentable {}
extension Vmax.VmaxRequestAttributeKeys : Swift.Equatable {}
extension Vmax.VmaxRequestAttributeKeys : Swift.Hashable {}
extension Vmax.VmaxRequestAttributeKeys : Swift.RawRepresentable {}
extension Vmax.ConnectionType : Swift.Equatable {}
extension Vmax.ConnectionType : Swift.Hashable {}
extension Vmax.ConnectionType : Swift.RawRepresentable {}
extension Vmax.FoodDrink : Swift.Equatable {}
extension Vmax.FoodDrink : Swift.Hashable {}
extension Vmax.FoodDrink : Swift.RawRepresentable {}
extension Vmax.ResponsemainadextmetaAdmeta.CodingKeys : Swift.Equatable {}
extension Vmax.ResponsemainadextmetaAdmeta.CodingKeys : Swift.Hashable {}
extension Vmax.ResponsemainadextmetaAdmeta.CodingKeys : Swift.RawRepresentable {}
extension Vmax.DeviceType : Swift.Equatable {}
extension Vmax.DeviceType : Swift.Hashable {}
extension Vmax.DeviceType : Swift.RawRepresentable {}
extension Vmax.HomeGarden : Swift.Equatable {}
extension Vmax.HomeGarden : Swift.Hashable {}
extension Vmax.HomeGarden : Swift.RawRepresentable {}
extension Vmax.TechnologyComputing : Swift.Equatable {}
extension Vmax.TechnologyComputing : Swift.Hashable {}
extension Vmax.TechnologyComputing : Swift.RawRepresentable {}
extension Vmax.Shopping : Swift.Equatable {}
extension Vmax.Shopping : Swift.Hashable {}
extension Vmax.Shopping : Swift.RawRepresentable {}
extension Vmax.ResponseBid.Mtype : Swift.Equatable {}
extension Vmax.ResponseBid.Mtype : Swift.Hashable {}
extension Vmax.ResponseBid.Mtype : Swift.RawRepresentable {}
extension Vmax.ResponseBid.CodingKeys : Swift.Equatable {}
extension Vmax.ResponseBid.CodingKeys : Swift.Hashable {}
extension Vmax.ResponseBid.CodingKeys : Swift.RawRepresentable {}
extension Vmax.Orientation : Swift.Equatable {}
extension Vmax.Orientation : Swift.Hashable {}
extension Vmax.Orientation : Swift.RawRepresentable {}
extension Vmax.Travel : Swift.Equatable {}
extension Vmax.Travel : Swift.Hashable {}
extension Vmax.Travel : Swift.RawRepresentable {}
extension Vmax.Business : Swift.Equatable {}
extension Vmax.Business : Swift.Hashable {}
extension Vmax.Business : Swift.RawRepresentable {}
extension Vmax.AdClickBrowser : Swift.Equatable {}
extension Vmax.AdClickBrowser : Swift.Hashable {}
extension Vmax.AdClickBrowser : Swift.RawRepresentable {}
extension Vmax.RequestusermetaGeo.ModelType : Swift.Equatable {}
extension Vmax.RequestusermetaGeo.ModelType : Swift.Hashable {}
extension Vmax.RequestusermetaGeo.ModelType : Swift.RawRepresentable {}
extension Vmax.IllegalContent : Swift.Equatable {}
extension Vmax.IllegalContent : Swift.Hashable {}
extension Vmax.IllegalContent : Swift.RawRepresentable {}
extension Vmax.ResponseFallback2ExtMeta.ModelType : Swift.Equatable {}
extension Vmax.ResponseFallback2ExtMeta.ModelType : Swift.Hashable {}
extension Vmax.ResponseFallback2ExtMeta.ModelType : Swift.RawRepresentable {}
extension Vmax.ResponseFallback2ExtMeta.CodingKeys : Swift.Equatable {}
extension Vmax.ResponseFallback2ExtMeta.CodingKeys : Swift.Hashable {}
extension Vmax.ResponseFallback2ExtMeta.CodingKeys : Swift.RawRepresentable {}
extension Vmax.ResponsemainadextmetaAdmetaCampaignmetaOrder.CodingKeys : Swift.Equatable {}
extension Vmax.ResponsemainadextmetaAdmetaCampaignmetaOrder.CodingKeys : Swift.Hashable {}
extension Vmax.ResponsemainadextmetaAdmetaCampaignmetaOrder.CodingKeys : Swift.RawRepresentable {}
extension Vmax.VmaxLogType : Swift.Equatable {}
extension Vmax.VmaxLogType : Swift.Hashable {}
extension Vmax.VmaxLogType : Swift.RawRepresentable {}
extension Vmax.AdBreakState : Swift.Equatable {}
extension Vmax.AdBreakState : Swift.Hashable {}
extension Vmax.RequestimpextmetaFilters.CodingKeys : Swift.Equatable {}
extension Vmax.RequestimpextmetaFilters.CodingKeys : Swift.Hashable {}
extension Vmax.RequestimpextmetaFilters.CodingKeys : Swift.RawRepresentable {}
extension Vmax.VmaxSDKError.Codes : Swift.Equatable {}
extension Vmax.VmaxSDKError.Codes : Swift.Hashable {}
extension Vmax.VmaxSDKError.Codes : Swift.RawRepresentable {}
extension Vmax.VmaxHttpMethod : Swift.Equatable {}
extension Vmax.VmaxHttpMethod : Swift.Hashable {}
extension Vmax.VmaxHttpMethod : Swift.RawRepresentable {}
extension Vmax.News : Swift.Equatable {}
extension Vmax.News : Swift.Hashable {}
extension Vmax.News : Swift.RawRepresentable {}
extension Vmax.Gender : Swift.Equatable {}
extension Vmax.Gender : Swift.Hashable {}
extension Vmax.Gender : Swift.RawRepresentable {}
extension Vmax.PersonalFinance : Swift.Equatable {}
extension Vmax.PersonalFinance : Swift.Hashable {}
extension Vmax.PersonalFinance : Swift.RawRepresentable {}
extension Vmax.VmaxVastEvent : Swift.Equatable {}
extension Vmax.VmaxVastEvent : Swift.Hashable {}
extension Vmax.VmaxVastEvent : Swift.RawRepresentable {}
extension Vmax.ResponseSeatbid.Group : Swift.Equatable {}
extension Vmax.ResponseSeatbid.Group : Swift.Hashable {}
extension Vmax.ResponseSeatbid.Group : Swift.RawRepresentable {}
extension Vmax.Science : Swift.Equatable {}
extension Vmax.Science : Swift.Hashable {}
extension Vmax.Science : Swift.RawRepresentable {}
extension Vmax.RequestimpmetaInner.Secure : Swift.Equatable {}
extension Vmax.RequestimpmetaInner.Secure : Swift.Hashable {}
extension Vmax.RequestimpmetaInner.Secure : Swift.RawRepresentable {}
extension Vmax.RequestimpmetaInner.Clickbrowser : Swift.Equatable {}
extension Vmax.RequestimpmetaInner.Clickbrowser : Swift.Hashable {}
extension Vmax.RequestimpmetaInner.Clickbrowser : Swift.RawRepresentable {}
extension Vmax.RequestimpmetaInner.Displaymanager : Swift.Equatable {}
extension Vmax.RequestimpmetaInner.Displaymanager : Swift.Hashable {}
extension Vmax.RequestimpmetaInner.Displaymanager : Swift.RawRepresentable {}
extension Vmax.RequestimpmetaInner.Instl : Swift.Equatable {}
extension Vmax.RequestimpmetaInner.Instl : Swift.Hashable {}
extension Vmax.RequestimpmetaInner.Instl : Swift.RawRepresentable {}
extension Vmax.Modules.CodingKeys : Swift.Equatable {}
extension Vmax.Modules.CodingKeys : Swift.Hashable {}
extension Vmax.Modules.CodingKeys : Swift.RawRepresentable {}
extension Vmax.InteractionState : Swift.Equatable {}
extension Vmax.InteractionState : Swift.Hashable {}
extension Vmax.Careers : Swift.Equatable {}
extension Vmax.Careers : Swift.Hashable {}
extension Vmax.Careers : Swift.RawRepresentable {}
extension Vmax.Education : Swift.Equatable {}
extension Vmax.Education : Swift.Hashable {}
extension Vmax.Education : Swift.RawRepresentable {}
extension Vmax.ModelError.CodingKeys : Swift.Equatable {}
extension Vmax.ModelError.CodingKeys : Swift.Hashable {}
extension Vmax.ModelError.CodingKeys : Swift.RawRepresentable {}
extension Vmax.VmaxSections : Swift.Equatable {}
extension Vmax.VmaxSections : Swift.Hashable {}
extension Vmax.VmaxSections : Swift.RawRepresentable {}
extension Vmax.RequestUserMeta.CodingKeys : Swift.Equatable {}
extension Vmax.RequestUserMeta.CodingKeys : Swift.Hashable {}
extension Vmax.RequestUserMeta.CodingKeys : Swift.RawRepresentable {}
extension Vmax.ResponsemainadextmetaAdmetaCampaignmetaMarketer.CodingKeys : Swift.Equatable {}
extension Vmax.ResponsemainadextmetaAdmetaCampaignmetaMarketer.CodingKeys : Swift.Hashable {}
extension Vmax.ResponsemainadextmetaAdmetaCampaignmetaMarketer.CodingKeys : Swift.RawRepresentable {}
extension Vmax.AdPosition : Swift.Equatable {}
extension Vmax.AdPosition : Swift.Hashable {}
extension Vmax.AdPosition : Swift.RawRepresentable {}
extension Vmax.VmaxCTAaction : Swift.Equatable {}
extension Vmax.VmaxCTAaction : Swift.Hashable {}
extension Vmax.StyleFashion : Swift.Equatable {}
extension Vmax.StyleFashion : Swift.Hashable {}
extension Vmax.StyleFashion : Swift.RawRepresentable {}
extension Vmax.RequestAppMeta.CodingKeys : Swift.Equatable {}
extension Vmax.RequestAppMeta.CodingKeys : Swift.Hashable {}
extension Vmax.RequestAppMeta.CodingKeys : Swift.RawRepresentable {}
extension Vmax.AdBreakSkipBehaviour : Swift.Equatable {}
extension Vmax.AdBreakSkipBehaviour : Swift.Hashable {}
extension Vmax.AdBreakSkipBehaviour : Swift.RawRepresentable {}
extension Vmax.VmaxClientError : Swift.Equatable {}
extension Vmax.VmaxClientError : Swift.Hashable {}
extension Vmax.Society : Swift.Equatable {}
extension Vmax.Society : Swift.Hashable {}
extension Vmax.Society : Swift.RawRepresentable {}
extension Vmax.ReligionSpirituality : Swift.Equatable {}
extension Vmax.ReligionSpirituality : Swift.Hashable {}
extension Vmax.ReligionSpirituality : Swift.RawRepresentable {}
extension Vmax.RequestdevicemetaGeo.ModelType : Swift.Equatable {}
extension Vmax.RequestdevicemetaGeo.ModelType : Swift.Hashable {}
extension Vmax.RequestdevicemetaGeo.ModelType : Swift.RawRepresentable {}
extension Vmax.AdMeta.CodingKeys : Swift.Equatable {}
extension Vmax.AdMeta.CodingKeys : Swift.Hashable {}
extension Vmax.AdMeta.CodingKeys : Swift.RawRepresentable {}
extension Vmax.VmaxApis : Swift.Equatable {}
extension Vmax.VmaxApis : Swift.Hashable {}
extension Vmax.VmaxApis : Swift.RawRepresentable {}
extension Vmax.ResponseFallback1ExtMeta.ModelType : Swift.Equatable {}
extension Vmax.ResponseFallback1ExtMeta.ModelType : Swift.Hashable {}
extension Vmax.ResponseFallback1ExtMeta.ModelType : Swift.RawRepresentable {}
extension Vmax.ResponseFallback1ExtMeta.CodingKeys : Swift.Equatable {}
extension Vmax.ResponseFallback1ExtMeta.CodingKeys : Swift.Hashable {}
extension Vmax.ResponseFallback1ExtMeta.CodingKeys : Swift.RawRepresentable {}
extension Vmax.ResponsemainadextmetaFallback.CodingKeys : Swift.Equatable {}
extension Vmax.ResponsemainadextmetaFallback.CodingKeys : Swift.Hashable {}
extension Vmax.ResponsemainadextmetaFallback.CodingKeys : Swift.RawRepresentable {}
extension Vmax.RequestAppExtMeta.Orientation : Swift.Equatable {}
extension Vmax.RequestAppExtMeta.Orientation : Swift.Hashable {}
extension Vmax.RequestAppExtMeta.Orientation : Swift.RawRepresentable {}
extension Vmax.NonStandardContent : Swift.Equatable {}
extension Vmax.NonStandardContent : Swift.Hashable {}
extension Vmax.NonStandardContent : Swift.RawRepresentable {}
extension Vmax.AdBreakRecurrence : Swift.Equatable {}
extension Vmax.AdBreakRecurrence : Swift.Hashable {}
extension Vmax.AdBreakRecurrence : Swift.RawRepresentable {}
extension Vmax.ArtsEntertainment : Swift.Equatable {}
extension Vmax.ArtsEntertainment : Swift.Hashable {}
extension Vmax.ArtsEntertainment : Swift.RawRepresentable {}
extension Vmax.LawGovtPolitics : Swift.Equatable {}
extension Vmax.LawGovtPolitics : Swift.Hashable {}
extension Vmax.LawGovtPolitics : Swift.RawRepresentable {}
extension Vmax.VmaxAdState : Swift.Equatable {}
extension Vmax.VmaxAdState : Swift.Hashable {}
extension Vmax.HealthFitness : Swift.Equatable {}
extension Vmax.HealthFitness : Swift.Hashable {}
extension Vmax.HealthFitness : Swift.RawRepresentable {}
extension Vmax.RequestImpExtMeta.Orientation : Swift.Equatable {}
extension Vmax.RequestImpExtMeta.Orientation : Swift.Hashable {}
extension Vmax.RequestImpExtMeta.Orientation : Swift.RawRepresentable {}
extension Vmax.RequestDeviceMeta.Dnt : Swift.Equatable {}
extension Vmax.RequestDeviceMeta.Dnt : Swift.Hashable {}
extension Vmax.RequestDeviceMeta.Dnt : Swift.RawRepresentable {}
extension Vmax.RequestDeviceMeta.Devicetype : Swift.Equatable {}
extension Vmax.RequestDeviceMeta.Devicetype : Swift.Hashable {}
extension Vmax.RequestDeviceMeta.Devicetype : Swift.RawRepresentable {}
extension Vmax.RequestDeviceMeta.Connectiontype : Swift.Equatable {}
extension Vmax.RequestDeviceMeta.Connectiontype : Swift.Hashable {}
extension Vmax.RequestDeviceMeta.Connectiontype : Swift.RawRepresentable {}
extension Vmax.Pets : Swift.Equatable {}
extension Vmax.Pets : Swift.Hashable {}
extension Vmax.Pets : Swift.RawRepresentable {}
extension Vmax.HobbiesInterests : Swift.Equatable {}
extension Vmax.HobbiesInterests : Swift.Hashable {}
extension Vmax.HobbiesInterests : Swift.RawRepresentable {}
extension Vmax.Automotive : Swift.Equatable {}
extension Vmax.Automotive : Swift.Hashable {}
extension Vmax.Automotive : Swift.RawRepresentable {}
extension Vmax.Responsefallback1extmetaFallback.CodingKeys : Swift.Equatable {}
extension Vmax.Responsefallback1extmetaFallback.CodingKeys : Swift.Hashable {}
extension Vmax.Responsefallback1extmetaFallback.CodingKeys : Swift.RawRepresentable {}
extension Vmax.RealEstate : Swift.Equatable {}
extension Vmax.RealEstate : Swift.Hashable {}
extension Vmax.RealEstate : Swift.RawRepresentable {}
extension Vmax.ResponsemainadextmetaAdmetaCampaignmeta.CodingKeys : Swift.Equatable {}
extension Vmax.ResponsemainadextmetaAdmetaCampaignmeta.CodingKeys : Swift.Hashable {}
extension Vmax.ResponsemainadextmetaAdmetaCampaignmeta.CodingKeys : Swift.RawRepresentable {}
extension Vmax.ResponseMainAdExtMeta.ModelType : Swift.Equatable {}
extension Vmax.ResponseMainAdExtMeta.ModelType : Swift.Hashable {}
extension Vmax.ResponseMainAdExtMeta.ModelType : Swift.RawRepresentable {}
extension Vmax.ResponseMainAdExtMeta.CodingKeys : Swift.Equatable {}
extension Vmax.ResponseMainAdExtMeta.CodingKeys : Swift.Hashable {}
extension Vmax.ResponseMainAdExtMeta.CodingKeys : Swift.RawRepresentable {}
